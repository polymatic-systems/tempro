#!/bin/sh

# shellcheck source=/dev/null

set -ae

if [ "$1" = "help" ] || [ "$#" -lt "2" ]; then
  echo "
  tempro - template process

Usage: tempro env_file command_with_args...

  env_file - path to a file containing environment variable definitions.
             if an empty string is provided (such as ''), then no file is sourced.
             an example environment variables definitions file might have something like:

    export VAR_ONE=one
    export VAR_TWO=two
    export VAR_THREE=three
  
  command_with_args - the command and args to run, such as:
              
    helm upgrade metrics-server stable/metrics-server --version 2.11.4 \\
      --install --namespace kube-system --values metrics-server/values.yml

Options:

  the following environment variables can be set to change tempro

  TEMPRO_DEFAULT_ENV:       set to the path of a file to source before the env_file is sourced. defaults to 'default.env'
  TEMPRO_FUNCTIONS_ENV:     set to the path of a file to source after the env_file is sourced. defaults to 'functions.env'
  TEMPRO_AUTO_APPROVE:      if set to 'yes', the prompt will not be displayed and the command will automatically be run
  TEMPRO_SILENT:            if set to 'yes', suppress all output
  TEMPRO_PRINT_K8S_CLUSTER: if set to 'yes', print the current kubernetes cluster in the INFO section

Examples:

  tempro path/to/production.env helm upgrade metrics-server stable/metrics-server --values metrics-server/\${CLOUD_PROVIDER}/values.yml --install 

  tempro staging.env kubectl apply -f deploy.yml -f service.yml

About:

  Tempro will run a command for you, but before doing so, it will source several files and run environment variable
  substitution on any files it finds in the arguments.

  Only variables using the \${} format will be substituted. For exampe, \${SOME_VAR} will be substituted, but \$ANOTHER_VAR will not!

  The files sourced (if they exist) are:

  default.env - a file that should contain default environment variables
  [env_file] - a file that should contain additional environment variables and ones to override any defaults if needed
  functions.env - a file with shell functions to reformat environment variable values as needed

  Tempro will also substitute any environment variables found in the arguments. However, for this to work, the 
  dollar sign of the environment variable must be escaped so that it is not substitued by the shell before being passed
  to tempro. For example: \${SOME_VAR}

  The final templated command and files will be printed along with some info about the environment file sourced. 

  A prompt will be displayed allowing the user to abort running the command in case they see an error in the resulting 
  files or realize they have applied the wrong config.

  In addition, tempro will generate base64 encoded variables of all environment variables that can be used for 
  substitution in the files. For example, if SOME_VAR exists, the program will create SOME_VAR_BASE64. Some types
  of environment variables that will be filtered from base64 encoding include ones with names that don't match the 
  [a-zA-Z0-9_] pattern, that have multi-line values, and that have names already suffixed with _BASE64.
"
  exit 0;
fi

if [ "$(command -v envsubst grep sed xargs rev cut mv cat | wc -l | xargs)" != "8" ]; then
  echo "ERROR: there are missing packages. Please ensure the following programs are installed:
envsubst grep sed xargs rev cut mv cat"
  exit 1;
fi

mpre() { case $2 in "$1"*) true;; *) false;; esac; }

TP_PATH="${1}"

shift

if [ "${TEMPRO_SILENT}" != "yes" ]; then
  tempro_log() {
    printf "$@"
  }
  tempro_cat() {
    cat "$@"
  }
else
  tempro_log() {
    :
  }
  tempro_cat() {
    :
  }
fi

TEMPRO_DEFAULT_ENV="${TEMPRO_DEFAULT_ENV:-default.env}"
TEMPRO_FUNCTIONS_ENV="${TEMPRO_FUNCTIONS_ENV:-functions.env}"

[ -f "${TEMPRO_DEFAULT_ENV}" ] && . "${TEMPRO_DEFAULT_ENV}"
[ "${TP_PATH}" != '' ] && . "${TP_PATH}"
[ -f "${TEMPRO_FUNCTIONS_ENV}" ] && . "${TEMPRO_FUNCTIONS_ENV}"

tempro_log "%s\n" "creating base64 vars:"

PIFS="${IFS}";
IFS='
'
for line in $(export -p | sed "s/^export //g" | sed "s/^declare -x //g" | grep "=['\"].*['\"]") # reduces to single line vars
do
  tempro_log "%s" "."
  var_name="$(printf '%s' "${line}" | grep -E '=' | sed 's/=.*//g' | grep -E '[a-zA-Z0-9_]' | grep -v "_BASE64")" || true;
  if [ -n "$var_name" ]; then
    export "${var_name}_BASE64=$(printf "%s" "$line" | sed 's/.*=//g' | sed 's/^"//g' | sed 's/"$//g' | tr -d '\n' | base64)";
  fi;
done;
IFS="${PIFS}";
tempro_log "\n" "";

# template process the command

for x in "$@"
do
  TP_CMD="${TP_CMD}$(printf '%s' "$x" | envsubst) "
done

# create temporary file

TP_FILES=''
for word in $TP_CMD; do
  if mpre "-" "$word"; then
    i=1;
    j=$((${#word} + 1))
    while [ $i -le $j ]; do
      if [ "$(printf "%s" "$word" | cut -c "$i")" = '=' ]; then
        value="$(printf "%s" "$word" | cut -d'=' -f2-)"
        if [ -f "$value" ]; then
          TP_FILES="${TP_FILES} $value"
        fi
      fi
      i=$((i+1))
    done
  else
    if [ -f "$word" ]; then
      TP_FILES="${TP_FILES} $word"
    fi
  fi
done

backup_files () {
  for path in $1; do
    TP_VFILE=$(echo "$path" | rev | cut -d'/' -f1 | rev)
    TP_VDIR=${path%"$TP_VFILE"}
    TP_PRM="${TP_VDIR}${TP_VFILE}"
    TP_TMP="${TP_VDIR}.${TP_VFILE}"
    mv -f "${TP_PRM}" "${TP_TMP}"
  done
}

restore_files () {
  for path in $1; do
    TP_VFILE=$(echo "$path" | rev | cut -d'/' -f1 | rev)
    TP_VDIR=${path%"$TP_VFILE"}
    TP_PRM="${TP_VDIR}${TP_VFILE}"
    TP_TMP="${TP_VDIR}.${TP_VFILE}"
    mv -f "${TP_TMP}" "${TP_PRM}"
  done
}

backup_files "$TP_FILES"

trap 'restore_files "${TP_FILES}"; echo "\ncommand aborted"; exit 0;' HUP INT QUIT ABRT TERM

export DOLLAR='$'

for path in $TP_FILES; do
  TP_VFILE=$(echo "$path" | rev | cut -d'/' -f1 | rev)
  TP_VDIR=${path%"$TP_VFILE"}
  TP_PRM="${TP_VDIR}${TP_VFILE}"
  TP_TMP="${TP_VDIR}.${TP_VFILE}"

  # template process file -> replace $ w/ ${DOLLAR}, then substitute ${} variables into file
  # shellcheck disable=SC2016
  < "${TP_TMP}" sed 's/\${/dolllarsign{/g' | sed 's/\$/\${DOLLAR}/g' | sed 's/dolllarsign{/\${/g' | envsubst > "${TP_PRM}";

  tempro_log "\n%s\n\n" "--------- FILE: ${TP_PRM}"
  tempro_cat "${TP_PRM}"
done

tempro_log "\n\n%s \n\n" "--------- INFO:";

if [ "$TEMPRO_PRINT_K8S_CLUSTER" = "yes" ]; then
  printf "\ncurrent cluster: %s\n\n" "$(kubectl config current-context)";
fi;

tempro_log "env file: %s

command: %s\n\n" "${TP_PATH}" "${TP_CMD}"

if [ "$TEMPRO_AUTO_APPROVE" != 'yes' ]; then
  echo "Press enter to continue or ^C to abort"
  read -r
fi

set +e

eval "$TP_CMD"

set -e

restore_files "${TP_FILES}"
